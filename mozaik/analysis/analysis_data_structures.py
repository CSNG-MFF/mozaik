"""
This module contains the definition of the AnalysisDataStructure API and
implementation of some basic analysis data structures.
"""

import numpy
import param
import mozaik
from mozaik.stimuli.stimulus import StimulusID, identical_stimulus_type, colapse, colapse_to_dictionary
from mozaik.tools.mozaik_parametrized import *

logger = mozaik.getMozaikLogger("Mozaik")


class AnalysisDataStructure(MozaikParametrized):
    """
    Encapsulates data that a certain Analysis class generates.

    An analysis class can generate several AnalysisDataStructures (ADSs) and
    one ADS can be generated by several Analysis classes.
    The goal is to offer a common interface of such data for plotting
    i.e. many analyses can generate 2D tuning curves of several kinds but they
    all share a common data structure and can be plotted in a common way.

    One important aspect of the ADS design is the notion of parameters as
    opposed to inputs. Each ADS should define a number of Parameters (see the
    documentation on Parameters).
    The importance of parameters is that they will offer a way to identify the
    ADS in the data store (see analysis_data_structure_parameter_filter_query
    in queries). Furthermore the constructor of the AnalysisDataStructure can
    accept inputs, which are standard variables that should correspond to the
    data that is actually stored in the ADS.

    The five parameters that each ADS has are:

        identifier -
            An important parameter of each AnalysisDataStructure is an
            identifier which is used to identify data structures of common type
            in storage facilities. Currently different datastructures with
            a common interface should share the identifiers but it is not clear
            yet whether this is needed. If it turns out such sharing is not
            necessary it might be abolished and there will be one-to-one
            mapping between AnalysisDataStructure classes and identifiers.

        analysis_algorithm -
            The identity (name) of the analysis class that produced this
            analysis data structure.

        sheet_name -
            The sheet for which this results were computed. None if they do not
            belong to a specific sheet.

        neuron -
            Neuron id to which the data structure belongs. None if it is not
            neuron specific.

        stimulus_id -
            Stimulus id (as string) to which the data structure belongs.
            None if it is not stimulus specific.

        tags -
            In complicated workflows it might become difficult to design a
            filter to extract the right set of recordings or analysis data
            structures for a given analysis or visualization.
            We do not want users to define multiple AnalysisDataStructures that
            hold the same kind of data only to be able to tell them apart.

            Therefore, we also allow all analysis data structures to contain a
            list of tags (which are strings) that one can add during their
            creation (or later) and use them to later for their identification
            in a DataStore. Queries are written that support filtering of ADSs
            based on tags.

            However, in general, we encourage users to use filter methods
            rather than tags to perform their plotting/analysis whenever
            possible!
    """

    identifier = param.String(instantiate=True,
                              doc="The identifier of the analysis data structure")
    analysis_algorithm = param.String(instantiate=True,
                                      doc="The identifier of the analysis data structure")
    neuron = param.Integer(allow_None=True,
                           default=None,
                           instantiate=True,
                           doc="Neuron id to which the datastructure belongs. None if it is not neuron specific")
    sheet_name = param.String(allow_None=True,
                              default=None,
                              instantiate=True,
                              doc="The sheet for which this results were computed. None if they do not belong to specific sheet")
    stimulus_id = param.String(allow_None=True,
                               default=None,
                               instantiate=True,
                               doc="The stimulus for which the results were computed. None if they are not related to specific stimulus")
    tags = param.List(default=[],
                      instantiate=True,
                      doc="The list of tags to attach")

    def __init__(self, **params):
        Parameterized.__init__(self, **params)

    def __str__(self):
        """
        Returns the description of the ASD - its class name and the list of its
        parameters and their values.
        """
        param_str = "\n".join(['   \"%s\":%s' % (name, repr(val))
                               for name, val in self.get_param_values()])
        return self.__class__.__name__ + "\n" + param_str


class PerNeuronValue(AnalysisDataStructure):
    """
    Data structure holding single value per neuron.

    values
          - the vector of values one per neuron

    value_name
          - The name of the value.

    value_units
          - quantities unit describing the units of the value

    period
          - The period of the value. If value is not periodic period=None
    """
    value_name = param.String(instantiate=True,
                              doc="The name of the value.")
    period = param.Number(default=None,
                          instantiate=True,
                          doc="The name of the value.")

    def __init__(self, values, value_units, **params):
        AnalysisDataStructure.__init__(self, identifier='PerNeuronValue', **params)
        self.value_units = value_units
        self.values = values


class AnalysisDataStructure1D(AnalysisDataStructure):
    """
    Data structure representing 1D data.
    All data corresponds to the same axis name and units.
    Explicitly specifies the axis - their name and units.
    Note that at this stage we do not assume the structure in which the data
    is stored.
    Also the class can hold multiple instances of 1D data.

    It uses the quantities package to specify units.
    If at all possible all data stored in numoy arrays should be quantities
    arrays with matching units!

    x_axis_name -
          the name of the x axis
    y_axis_name -
          the name of the y axis
    x_axis_untis -
          the quantities units of x axis
    y_axis_units -
          the quantities units of y axis
    """

    x_axis_name = param.String(instantiate=True, doc="the name of the x axis.")
    y_axis_name = param.String(instantiate=True, doc="the name of the y axis.")

    def __init__(self, x_axis_units, y_axis_units, **params):
        AnalysisDataStructure.__init__(self, **params)
        self.x_axis_units = x_axis_units
        self.y_axis_units = y_axis_units


class AnalogSignalList(AnalysisDataStructure1D):
    """
    This is a simple list of Neo AnalogSignal objects.

    asl -
         the variable containing the list of AnalogSignal objects, in the order
         corresponding to the order of neurons indexes in the indexes parameter.
    indexes -
         list of indexes of neurons in the original Mozaik sheet to which the
         AnalogSignals correspond.
    """

    def __init__(self, asl, indexes, x_axis_units, y_axis_units, **params):
        AnalysisDataStructure1D.__init__(self, x_axis_units, y_axis_units,
                                         identifier='AnalogSignalList',
                                         **params)
        self.asl = asl
        self.indexes = indexes


class ConductanceSignalList(AnalysisDataStructure1D):
    """
    This is a simple list of Neurotools AnalogSignal objects representing the
    conductances.

    The object holds two lists, one for excitatory and one for inhibitory
    conductances.

    e_asl -
       the variable containing the list of AnalogSignal objects corresponding
       to excitatory conductances, in the order corresponding to the order of
       neurons indexes in the indexes parameter
    i_asl -
       the variable containing the list of AnalogSignal objects corresponding
       to inhibitory conductances, in the order corresponding to the order of
       neurons indexes in the indexes parameter
    indexes -
       list of indexes of neurons in the original Mozaik sheet to which the
       AnalogSignals correspond
    """

    def __init__(self, e_con, i_con, indexes, **params):
        assert e_con[0].units == i_con[0].units
        AnalysisDataStructure1D.__init__(self,
                                         e_con[0].sampling_rate.units,
                                         e_con[0].units,
                                         x_axis_name='time',
                                         y_axis_name='conductance',
                                         identifier='ConductanceSignalList',
                                         **params)
        self.e_con = e_con
        self.i_con = i_con
        self.indexes = indexes


class Connections(AnalysisDataStructure1D):
    """
    Data structure holding connections.

    name -
            projection name

    source_name -
            the name of the source sheet

    target_name -
            the name of the target sheet

    weights -
            matrix of weights from neurons in source sheet (first dimension) to
            neurons in target sheet (second dimension)
    """

    name = param.String(instantiate=True, doc="Projection name.")
    source_name = param.String(instantiate=True, doc="The name of the source sheet.")
    target_name = param.String(instantiate=True, doc="The name of the target sheet.")

    def __init__(self, weights, **params):
        AnalysisDataStructure.__init__(self, identifier='Connections', **params)
        self.weights = weights
