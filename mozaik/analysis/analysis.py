"""
This module contains the Mozaik analysis interface and implementation of various analysis algorithms
"""

import pylab
import numpy 
import time
import quantities as qt
import mozaik.tools.units as munits
from mozaik.stimuli.stimulus import colapse, StimulusID
from mozaik.analysis.analysis_data_structures import CyclicTuningCurve,TuningCurve, ConductanceSignalList , AnalogSignalList, PerNeuronValue
from mozaik.analysis.analysis_helper_functions import time_histogram_across_trials
from mozaik.framework.interfaces import MozaikParametrizeObject
from NeuroTools.parameters import ParameterSet
from mozaik.storage.queries import select_stimuli_type_query,select_result_sheet_query, partition_by_stimulus_paramter_query
from neo.core.analogsignal import AnalogSignal
from NeuroTools import signals
from mozaik.tools.circ_stat import circ_mean
import logging

logger = logging.getLogger("mozaik")

class Analysis(MozaikParametrizeObject):
    """
    Analysis encapsulates analysis algorithms. 
    The interface is extremely simple: it only requires the implementation of perform_analysis function
    which when called performs the actually analysis
    
    It is assumed that this function retrieves its own data from DataStore that is supplied in the self.datastore
    parameter. Also it is assumed to include self.tags as the tags for all AnalysisDataStructure that
    it creates. See description of self.tags in AnalysisDataStructure
    
    Args:
        datastore (DataStoreView): the datastore from which to pull data.
        parameters (ParameterSet): the parameter set
        tags (list(str)): tags to attach to the AnalysisDataStructures generated by the analysis
    
    """
    
    def __init__(self,datastore,parameters,tags=None):
        MozaikParametrizeObject.__init__(self,parameters)
        self.datastore = datastore
        if tags == None:
            self.tags = []
        else:
            self.tags = tags
    
    def analyse(self):
        t1 = time.time()
        self.perform_analysis()
        t2 = time.time()
        logger.warning(self.__class__.__name__ + ' analysis took: ' + str(t2-t1) + 'seconds')

    def perform_analysis(self):
        """
        The function that implements the analysis
        """
        raise NotImplementedError
        pass
        

class AveragedOrientationTuning(Analysis):
      """
      This analysis takes all recordings with FullfieldDriftingSinusoidalGrating 
      stimulus. It averages the trials and creates tuning curves with respect to the 
      orientation parameter. Thus for each combination of the other stimulus parameters
      a tuning curve is created. 
      """
      def perform_analysis(self):
            logger.info('Starting OrientationTuning analysis')
            dsv = select_stimuli_type_query(self.datastore,'FullfieldDriftingSinusoidalGrating')

            for sheet in dsv.sheets():
                dsv1 = select_result_sheet_query(dsv,sheet)
                segs = dsv1.get_segments()
                st = dsv1.get_stimuli()
                # transform spike trains due to stimuly to mean_rates
                mean_rates = [numpy.array(s.mean_rates())  for s in segs]
                # collapse against all parameters other then orientation
                (mean_rates,s) = colapse(mean_rates,st,parameter_list=['trial'])
                # take a sum of each 
                def _mean(a):
                    l = len(a)
                    return sum(a)/l
                mean_rates = [_mean(a) for a in mean_rates]
                
                #JAHACK make sure that mean_rates() return spikes per second
                units = munits.spike / qt.s
                logger.debug('Adding CyclicTuningCurve to datastore')
                self.datastore.full_datastore.add_analysis_result(CyclicTuningCurve(numpy.pi,mean_rates,s,"orientation",'Response',units,sheet_name=sheet,tags=self.tags,analysis_algorithm=self.__class__.__name__))

class PeriodicTuningCurvePreferenceAndSelectivity_VectorAverage(Analysis):
      """
      This analysis takes all cyclic tuning curves.
      
      For each parametrization of tuning_curves it creates a PerNeuronVector holding the
      preference of the tuning curve for all neurons for which data were supplied.
      """
      def perform_analysis(self):
            logger.info('Starting Orientation Preference analysis')
            for sheet in self.datastore.sheets():
                # get all the cyclic tuning curves 
                self.tuning_curves = self.datastore.get_analysis_result(identifier='CyclicTuningCurve',sheet_name=sheet)
                for tc in self.tuning_curves:
                    d = tc.to_dictonary_of_tc_parametrization()
                    result_dict = {}
                    for k in  d:
                        g,h = d[k]
                        values = []
                        period = []
                        for v,p in zip(g,h):
                            values.append(v)
                            period.append(numpy.zeros(numpy.shape(v))+p)
                        
                        pref,sel = circ_mean(numpy.array(period),weights=numpy.array(values),axis=0,low=0,high=tc.period,normalize=True)
                        
                        logger.debug('Adding PerNeuronValue to datastore')
                        st = StimulusID(k)
                        self.datastore.full_datastore.add_analysis_result(PerNeuronValue(pref,st.units[tc.parameter_name],value_name = tc.parameter_name + ' preference',sheet_name=sheet,tags=self.tags,period=tc.period,analysis_algorithm=self.__class__.__name__))
                        self.datastore.full_datastore.add_analysis_result(PerNeuronValue(sel,st.units[tc.parameter_name],value_name = tc.parameter_name + ' selectivity',sheet_name=sheet,tags=self.tags,period=1.0,analysis_algorithm=self.__class__.__name__))

class GSTA(Analysis):
      """
      Computes conductance spike triggered average
      
      Note that it does not assume that spikes are aligned with the conductance sampling rate
      and will pick the bin in which the given spike falls (within the conductance sampling rate binning)
      as the center of the conductance vector that is included in the STA
      """
      
      required_parameters = ParameterSet({
        'length': float,  # length (in ms time) how long before and after spike to compute the GSTA
                          # it will be rounded down to fit the sampling frequency
        'neurons' : list, #the list of neuron indexes for which to compute the 
      })

      
      def perform_analysis(self):
            logger.info('Starting Spike Triggered Analysis of Conductances')
            
            dsv = self.datastore
            for sheet in dsv.sheets():
                dsv1 = select_result_sheet_query(dsv,sheet)
                st = dsv1.get_stimuli()
                segs = dsv1.get_segments()

                asl_e = []
                asl_i = []
                for n in self.parameters.neurons:
                    sp = [s.spiketrains[n] for s in segs]
                    g_e = [s.get_esyn(n) for s in segs]
                    g_i = [s.get_isyn(n) for s in segs]
                    asl_e.append(self.do_gsta(g_e,sp))
                    asl_i.append(self.do_gsta(g_i,sp))

                self.datastore.full_datastore.add_analysis_result(ConductanceSignalList(asl_e,asl_i,self.parameters.neurons,sheet_name=sheet,tags=self.tags,analysis_algorithm=self.__class__.__name__))
                
                
      def do_gsta(self,analog_signal,sp):
          dt = analog_signal[0].sampling_period
          gstal = int(self.parameters.length/dt)
          gsta = numpy.zeros(2*gstal+1,) 
          count = 0
          for (ans,spike) in zip(analog_signal,sp):
              for time in spike:
                  if time > ans.t_start  and time < ans.t_stop:
                     idx = int((time - ans.t_start)/dt)
                     if idx - gstal > 0 and (idx + gstal+1) <= len(ans):
                        gsta = gsta +  ans[idx-gstal:idx+gstal+1].flatten().magnitude
                        count +=1
          if count == 0:
             count = 1
          gsta = gsta/count
          gsta = gsta * analog_signal[0].units
          
          return AnalogSignal(gsta, t_start=-gstal*dt,sampling_period=dt,units=analog_signal[0].units)
          
           
          
          
class Precision(Analysis):
      """
      Computes the precision as the autocorrelation between the PSTH of different trials.
      Takes all the responses in the datastore.
      """
      
      required_parameters = ParameterSet({
        'neurons' : list, #the list of neuron indexes for which to compute the 
        'bin_length' : float, #(ms) the size of bin to construct the PSTH from
      })
      
      def perform_analysis(self):
            logger.info('Starting Precision Analysis')
            dsv = self.datastore
            for sheet in dsv.sheets():
                dsv1 = select_result_sheet_query(dsv,sheet)
                dsvs = partition_by_stimulus_paramter_query(dsv1,'trial')
                
                for dsv in dsvs:
                    sl = [s.spiketrains for s in dsv.get_segments()]
                    t_start = sl[0][0].t_start
                    t_stop =  sl[0][0].t_stop
                    duration = t_stop-t_start
                    
                    hist = time_histogram_across_trials(sl,self.parameters.bin_length)
                    al = []
                    for n in self.parameters.neurons:
                        ac = numpy.correlate(hist[n], hist[n], mode='full')
                        if numpy.sum(numpy.power(hist[n],2)) != 0:
                            ac = ac / numpy.sum(numpy.power(hist[n],2))
                        al.append(AnalogSignal(ac, t_start=-duration,t_stop=duration-self.parameters.bin_length*t_start.units,sampling_period=self.parameters.bin_length*qt.ms,units=qt.dimensionless))
                   
                    logger.debug('Adding AnalogSignalList:' + str(sheet))
                    self.datastore.full_datastore.add_analysis_result(AnalogSignalList(al,self.parameters.neurons,qt.ms,qt.dimensionless,x_axis_name='time',y_axis_name='autocorrelation',sheet_name=sheet,tags=self.tags,analysis_algorithm=self.__class__.__name__))    

                        
class ModulationRatio(Analysis):
      """
      This analysis calculates the modulation ration (as the F1/F0) for all neurons in the data
      using all available responses recorded to the FullfieldDriftingSinusoidalGrating stimuli. This method 
      also requires that AveragedOrientationTuning has already been calculated.
      """

      required_parameters = ParameterSet({
        'bin_length' : float, #(ms) the size of bin to construct the PSTH from
      })

      
      def perform_analysis(self):
            logger.info('Modulation ratio analysis')
            dsv = select_stimuli_type_query(self.datastore,'FullfieldDriftingSinusoidalGrating')
            for sheet in dsv.sheets():
                dsv1 = select_result_sheet_query(dsv,sheet)
                pert_trials_dsvs = partition_by_stimulus_paramter_query(dsv1,'trial')
                self.pnvs = self.datastore.get_analysis_result(identifier='PerNeuronValue',sheet_name=sheet,value_name='orientation preference')
                
                if len(self.pnvs) != 1:
                   logger.error('Expected only one PerNeuronValue per sheet with value_name \'orientation preference\' in datastore, got: ' + str(len(pnvs)))
                   return None
                else:
                    pnv = pnvs[0]
                
                # find closest orientation of grating to a given orientation preference of a neuron
                
                # first find all the different presented stimuli:
                ps = {}
                for s in pert_trials_dsvs.get_stimuli():
                    ps[StimulusID(s).params['orientation']] = True
                ps = ps.keys()
                
                
                # now find the closest presented orientations
                closest_presented_orientation = []
                for i in xrange(0,len(pnv.values)):
                    circ_d = 100
                    idx = 0
                    for j in xrange(0,len(ps)):
                        if circ_d > circular_dist(pnv.values[i],ps[j],numpy.pi):
                           circ_d = circular_dist(pnv.values[i],ps[j],numpy.pi)
                           idx = j
                    closest_presented_orientation.append(idx)    
                
                modulation_ratio = numpy.array((1,len(pert_trials_dsvs[0].get_segments().spiketrains)))
                
                period = temporal_frequency
                
                for i,dsv in enumerate(pert_trials_dsvs):
                    sl = [s.spiketrains for s in dsv.get_segments()]
                    t_start = sl[0][0].t_start
                    t_stop =  sl[0][0].t_stop
                    duration = t_stop-t_start
                    
                    hist = time_histogram_across_trials(sl,self.parameters.bin_length)
                    for j in numpy.nonzero(i == numpy.array(closest_presented_orientation)):
                        modulation_ratio[j] = self.calculate_MR(hist[j])
                    
                    
                    
                    
      #def calculate_MR(self,signal,period):
          
