.. _mozaik.analysis:

analysis Package
================

This sub-package contains modules that are related to analysis.

Modules
^^^^^^^    
    * :py:mod:`mozaik.analysis.analysis` - This module provides the Mozaik analysis interface and implements various analysis algorithms for neural data processing i.e. Basic Spike Analysis, Tuning & Selectivity, Trial-to-Trial Variability & Correlations, Conductance & Membrane Potential, Population & Signal Statistics, Signal Processing & Arithmetic and Temporal dynamics.
    * :py:mod:`mozaik.analysis.data_structures` - This module defines the core AnalysisDataStructure API and implements standardized data structures (e.g., per-neuron values, analog signals, conductance pairs) for storing and manipulating analysis results in Mozaik, with support for units, metadata, and hierarchical organization.
    * :py:mod:`mozaik.analysis.helper_functions` - This module provides utility functions for neural data analysis, including PSTH calculation, trial-averaged responses, and tensor conversion of PerNeuronValue data structures for parameter-space analysis.
    * :py:mod:`mozaik.analysis.technical` - This module implements specialized Mozaik analyses for technical workflows, including neuron annotation extraction, spike data export, and SingleValue summarization.
    * :py:mod:`mozaik.analysis.connections` - This module defines an InputAnalysis class in Mozaik that computes and stores the total synaptic input (afferent, recurrent-local, recurrent-distal, inhibitory, and feedback) received by each neuron from specified connection types, based on pre-synaptic firing rates and connection weights.
    * :py:mod:`mozaik.analysis.elephant_dependent` - This module implements criticality analysis for neural avalanches, calculating power-law distributions of avalanche sizes/durations and distance to criticality as defined in Ma et al. (2019) Neuron.
    * :py:mod:`mozaik.analysis.lfp` - This module is for analyzing LFP signals, including phase properties, filtering, LFP generation from PSTH/synaptic currents, orientation mapping, and spike-triggered LFP propagation analysis.
    * :py:mod:`mozaik.analysis.spontaneous_activity` - This module calculates the duration of stable spontaneous neural activity based on population PSTH, CV, and neuron-to-neuron correlation thresholds.
    * :py:mod:`mozaik.analysis.texture` - This module for for analyzing neural responses to texture stimuli, including modulation analysis, variance ratios, percentage of modulated neurons, and time-course PSTH comparisons with spectrally-matched noise.
    * :py:mod:`mozaik.analysis.vision` - This module for analyzing visual response properties including modulation ratios, size/orientation tuning, local homogeneity, and linearity indices from drifting grating stimuli.
    
Architecture
------------

The :class:`mozaik.analysis.analysis.Analysis` interface assumes that the input to the analysis is retrieved from 
:mod:`mozaik.storage.datastore`, in the form of recorded data or analysis data structures (see :mod:`mozaik.analysis.data_structures`)
produced by other analysis algorithms that were run previously. The analysis itself should be able to filter 
out from the datastore the recordings/data_structures that it can handle and should be as encompassing and general as possible.
This way it will be possible to significantly 'configure' the analysis process by merely filtering the data given 
to the Analysis classes via the :mod:`mozaik.storage.queries` mechanisms. The analysis function is 
responsible for packaging its results into one or a set of the data structures defined in :mod:`mozaik.analysis.data_structures` and send them to the 
datastorage. Thus when creating new analysis one should always check which data structures are already defined, and define
a new one only in case it is not possible to map the new results data structure on any of the existing ones.



Analysis data structures
------------------------

The goal of the AnalysisDataStructure class is to offer a common interface/format for data generated by analysis,
so they can be consumed by other analysis or visualization code in a standard way.
For example many analyses can generate 2D tuning curves of several kinds but they
all share a common data structure and can be plotted in a common way.

An analysis class can generate several `AnalysisDataStructures` (ADSs) and
one ADS can be generated by several Analysis classes.

One important aspect of the ADS design is the notion of parameters as
opposed to inputs. Each ADS should define a number of Parameters (see the
documentation on Parameters).
The importance of parameters is that they will offer a way to identify the
ADS in the data store (see param_filter_query in queries). 
Furthermore the constructor of the AnalysisDataStructure can
accept inputs, which are standard variables that should correspond to the
data that is actually stored in the ADS.

The five parameters that are common to each ADS and are defined in the top :class:`mozaik.analysis.data_structures.AnalysisDataStructure` class are:

identifier
    An important parameter of each AnalysisDataStructure is an
    identifier which is used to identify data structures of common type
    in storage facilities. Currently different datastructures with
    a common interface should share the identifiers but it is not clear
    yet whether this is needed. If it turns out such sharing is not
    necessary it might be abolished and there will be one-to-one
    mapping between AnalysisDataStructure classes and identifiers.

analysis_algorithm
    The identity (name) of the analysis class that produced this
    analysis data structure.

sheet_name
    The sheet for which this results were computed. None if they do not
    belong to a specific sheet.

neuron
    Neuron id to which the data structure belongs. None if it is not
    neuron specific.

stimulus_id
    Stimulus id (as string) to which the data structure belongs.
    None if it is not stimulus specific.

tags
    In complicated workflows it might become difficult to design a
    filter to extract the right set of recordings or analysis data
    structures for a given analysis or visualization.
    We do not want users to define multiple AnalysisDataStructures that
    hold the same kind of data only to be able to tell them apart.

    Therefore, we also allow all analysis data structures to contain a
    list of tags (which are strings) that one can add during their
    creation (or later) and use them to later for their identification
    in a DataStore. Queries are written that support filtering of ADSs
    based on tags.

    However, in general, we encourage users to use filter methods
    rather than tags to perform their plotting/analysis whenever
    possible!



For more details see the :mod:`mozaik.analysis.data_structures` and :mod:`mozaik.analysis.analysis` module and specifically the two most 
important API classes: :class:`mozaik.analysis.data_structures.AnalysisDataStructure` and :class:`mozaik.analysis.analysis.Analysis`

:mod:`analysis` Module
----------------------

.. automodule:: mozaik.analysis.analysis
    :members:
    :undoc-members:
    :show-inheritance:
    
    

:mod:`data_structures` Module
-----------------------------

.. automodule:: mozaik.analysis.data_structures
    :members:
    :undoc-members:
    :show-inheritance:
    
    

:mod:`helper_functions` Module
------------------------------

.. automodule:: mozaik.analysis.helper_functions
    :members:
    :undoc-members:
    :show-inheritance:

:mod:`technical` Module
-----------------------

.. automodule:: mozaik.analysis.technical
    :members:
    :undoc-members:
    :show-inheritance:




:mod:`vision` Module
--------------------

.. automodule:: mozaik.analysis.vision
    :members:
    :undoc-members:
    :show-inheritance:


:mod:`connections` Module
-------------------------

.. automodule:: mozaik.analysis.connections
    :members:
    :undoc-members:
    :show-inheritance: 


:mod:`elephant_dependent` Module
--------------------------------

.. automodule:: mozaik.analysis.elephant_dependent
    :members:
    :undoc-members:
    :show-inheritance: 


:mod:`lfp` Module
-----------------

.. automodule:: mozaik.analysis.lfp
    :members:
    :undoc-members:
    :show-inheritance: 


:mod:`spontaneous_activity` Module
----------------------------------

.. automodule:: mozaik.analysis.spontaneous_activity
    :members:
    :undoc-members:
    :show-inheritance: 


:mod:`texture` Module
---------------------

.. automodule:: mozaik.analysis.texture
    :members:
    :undoc-members:
    :show-inheritance: 